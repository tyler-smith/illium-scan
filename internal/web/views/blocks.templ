package views

import (
  "github.com/tyler-smith/iexplorer/internal/db/models"
  "github.com/tyler-smith/iexplorer/internal/web/helpers"
  "github.com/tyler-smith/iexplorer/internal/web/views/components"
)

templ BlocksIndex(blocks []models.Block){

}

templ BlocksShow(block models.Block, txs []models.Transaction){
    <div class="grid grid-cols-12 gap-4">
      <div class="col-span-3 card bg-white rounded-lg shadow-lg p-6">
        <p class="text-xl font-bold">Block #{helpers.FormatBlockHeight(block.Height)} ({helpers.FormatIDShort(block.ID)})</p>
        <p class="text-sm">Produced {helpers.FormatTimeRelative(block.Timestamp)} by <a href={"/validators/"+ templ.URL(block.ProducerID)} class="text-blue-500">{helpers.FormatIDShort(block.ProducerID)}</a></p>
      </div>
      <div class="col-span-9 card bg-white rounded-lg shadow-lg p-6">
        <p class="text-xl font-bold">Transactions</p>
        <div class="divide-y divide-zinc-400 border-b border-b-zinc-400">
        for _, tx := range txs {
          <div class="my-1.5 p-0.5 grid grid-cols-12">
            <p class="col-span-1 text-md">
              @components.TranasactionTypeBadge(tx.Type)
            </p>
            <p class="col-span-11 text-md">
              <a href={"/transactions/"+ templ.URL(tx.ID)} class="ml-8 text-blue-500">{tx.ID}</a>
            </p>
            <div class="col-span-2">
              <p class="text-md">Inputs: {helpers.FormatInt(len(tx.Nullifiers))}</p>
              <p class="text-md">Outputs: {helpers.FormatInt(len(tx.Outputs))}</p>
            </div>
            <div class="col-span-2">
              <p class="text-md">Fee: {helpers.FormatAmount(tx.Fee)} ilx</p>
              if tx.Type == models.TxTypeStandard {
                <p class="text-md">Locktime: {helpers.FormatLocktime(tx.Locktime)}</p>
              }
            </div>
            <div class="col-span-8">
              if tx.Type == models.TxTypeCoinbase {
                <p class="text-md">Validator: <a href={"/validators/"+ templ.URL(tx.Coinbase.ValidatorID)} class="text-blue-500">{helpers.FormatValidatorIDShort(tx.Coinbase.ValidatorID)}</a></p>
                <p class="text-md">New Coins: {helpers.FormatAmount(tx.Coinbase.NewCoins)} ilx</p>
              }
              else if tx.Type == models.TxTypeStake {
                <p class="text-md">Validator: <a href={"/validators/"+ templ.URL(tx.Stake.ValidatorID)} class="text-blue-500">{helpers.FormatValidatorIDShort(tx.Stake.ValidatorID)}</a></p>
                <p class="text-md">Amount: {helpers.FormatAmount(tx.Stake.Amount)} ilx</p>
              }
              else if tx.Type == models.TxTypeTreasury {
                <p class="text-md">Proposal Hash: {tx.TreasuryProposal.ProposalHash}</p>
                <p class="text-md">Amount: {helpers.FormatAmount(tx.TreasuryProposal.Amount)} ilx</p>
              }
              else if tx.Type == models.TxTypeMint {
                <p class="text-md">Asset: {tx.Mint.AssetID}</p>
                <p class="text-md">Amount: {helpers.FormatAmount(tx.Mint.NewTokens)} ilx</p>
              }
            </div>
          </div>
          }
        </div>
      </div>
    </div>
}

/*

Coinbase:
  - ValidatorID
  - NewCoins

Stake:
  - ValidatorID
  - Amount

TreasuryProposal
  - Amount
  - ProposalHash?

Mint:
  - AssetID
  - NewTokens
  - MintType?
  - DocumentHash?


*/
